//here goes the middleware pseudocode 
//requirement pseudocode
requirementExists(requirementID:Int)
    IF queryRequirementDatabase(requirementID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END requirementExists
//save the requirement 
saveRequirement(requirement:Requirement) 
    IF requirementExists(requirement.uniqueID) 
        IF NOT updateRequirement(requirement) 
            //displayUpdateFailed exist in gui
            displayUpdateFailed("ErrorSQL", requirement)
        END IF
    ELSE 
        IF NOT createRequirement(requirement) 
            //displayAddFailed exist in gui
            displayAddFailed("ErrorSQL", requirement)

        END IF        
    END IF 
    RETURN requirementSaved 
END saveRequirement 
createRequirement(requirement:Requirement)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToRequirementDatabase(requirement.uniqueID,
                                    requirement.Name,
                                    requirement.deliverableID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END createRequirement

deleteRequirement(requirementID:INT)
    IF requirementExists(requirementID)
        Requirement requirement=queryRequirementDatabase(requirementID)
        Deliverable[] otherRequirementsWithSameDeliverable=queryRequirementDatabaseWithConnectedDeliverable(requirement.deliverableID)
        IF otherRequirementsWithSameDeliverable.length==0
            deleteDeliverable(requirement.deliverableID)
        END IF
        queryDeleteRequirementFromDatabase(requirementID) 
        RETURN true
    ELSE
        RETURN false
    END IF
END deleteRequirement
//update Requirement  
updateRequirement(requirement:Requirement)  
    //database attributes validations will be verified in gui and database part of the program
    IF queryUpdateRequirementDatabase(requirement.uniqueID,
                                    requirement.Name,
                                    requirement.deliverableID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END updateRequirement

//deliverable pseudocode
deliverableExists(deliverableID:Int)
    IF queryDeliverableDatabase(deliverableID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END deliverableExists

createDeliverable(deliverable:Deliverable)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToDeliverableDatabase(deliverable.uniqueID,
                                    deliverable.Name,
                                    deliverable.description,
                                    deliverable.dueDate)
        RETURN true
    ELSE
        RETURN false
    END IF 
END createDeliverable
//update the deliverable  
updateDeliverable(deliverable:Deliverable)  
    //database attributes validations will be verified in gui and database part of the program
    IF queryUpdateDeliverableDatabase(deliverable.uniqueID,
                                        deliverable.Name,
                                        deliverable.description,
                                        deliverable.dueDate)
        RETURN true
    ELSE
        RETURN false
    END IF 
END updateDeliverable

deleteDeliverable(deliverableID:Int) 
    IF deliverableExists(deliverableID)
        Task[] associatedTasks=queryTaskDatabaseWithConnectedDeliverable(deliverableID)
        FOR EACH task IN associatedTasks
            removeAssociatedTasks(associatedTasks.uniqueID)
            removeAssociated(associatedTasks.uniqueID)
        END FOR
        queryDeleteDeliverableFromDatabase(deliverableID) 
        RETURN true
    ELSE
        RETURN false
    END IF
END deleteDeliverable 

//save the deliverable 
saveDeliverable(deliverable:Deliverable, associatedTasks:INT[], associatedRequirements:Int[] ) 
    IF deliverableExists(deliverable.uniqueID) 
        IF updateDeliverable(deliverable) 
            updateAssociatedTasks(deliverable.uniqueID, associatedTasks) 
            updateAssociatedRequirements(deliverable.uniqueID, associatedRequirements) 
        ELSE
            //displayUpdateFailed exist in gui
            displayUpdateFailed("ErrorSQL", deliverable)
        END IF
    ELSE 
        IF NOT createDeliverable(deliverable) 
            //displayAddFailed exist in gui
            displayAddFailed("ErrorSQL", deliverable)
        ELSE 
            addAssociatedTasks(deliverable.uniqueID, associatedTasks) 
            addAssociatedRequirements(deliverable.uniqueID, associatedRequirements) 
        END IF        
    END IF 
    RETURN deliverableSaved 
END saveDeliverable 

//get one deliverable
getDeliverable(deliverableID:Int)
    Deliverable deliverable = queryDeliverableDatabase(deliverableID)
    RETURN deliverable
END getDeliverable
//get one deliverable
getAllDeliverable()
    RETURN queryAllDeliverableDatabase()
END getDeliverable

//help how do I do this
updateAssociatedTasks(deliverableID:INT, associatedTasks:INT[]) 
    Task[] tasks=queryTaskDatabaseWithConnectedDeliverable(deliverableID)
    
END updateAssociatedTasks

updateAssociatedRequirements(deliverableID:INT, associatedRequirements:INT[]) 
    
END updateAssociatedRequirements

removeAssociatedTasks(taskID:INT) 
    Task task=queryTaskDatabase(taskID)
    task.deliverableID=NULL
     IF NOT updateTask(task)
        //displayUpdateFailed exist in gui
        displayUpdateFailed("ErrorSQL", temp)
    END IF    
END removeAssociatedTasks
removeAssociatedRequirements(requirementID:INT) 
    Requirement requirement=queryTaskDatabase(requirementID)
    requirement.deliverableID=NULL
     IF NOT updateRequirement(requirement)
        //displayUpdateFailed exist in gui
        displayUpdateFailed("ErrorSQL", temp)
    END IF    
END removeAssociatedTasks
addAssociatedTasks(deliverableID:INT, associatedTasks:INT[]) 
    FOR EACH task IN associatedTasks
        Task temp = queryTaskDatabase(task)
        temp.deliverableID=deliverableID
        IF NOT updateTask(temp)
            //displayUpdateFailed exist in gui
            displayUpdateFailed("ErrorSQL", temp)
        END IF
    END FOR
END addAssociatedTasks

addAssociatedRequirements(deliverableID:INT, associatedRequirements:INT[]) 
    FOR EACH requirment IN associatedRequirements
        Requirement temp = queryRequirementDatabase(requirment)
        temp.deliverableID=deliverableID
        IF NOT updateRequirement(temp)
            //displayUpdateFailed exist in gui
            displayUpdateFailed("ErrorSQL", temp)
        END IF
    END FOR
END addAssociatedRequirements

//task pseudocode
taskExists(taskID:Int)
    IF queryTaskDatabase(taskID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END taskExists

//create task  
createTask(deliverable:Task)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToTaskDatabase(task.uniqueID,
                                task.Name,
                                task.description,
                                task.expectedStartDate,
                                task.expectedEndDate,
                                task.expectedDuration,
                                task.expectedEffort,
                                task.actualStartDate,
                                task.actualEndDate,
                                task.actualDuration,
                                task.effortCompleted,
                                task.actualEffort,
                                task.percentComplete,
                                task.deliverableID,
                                task.taskType,
                                task.parentID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END createTask

//save task  
saveTask(task:Task, associatedTasks:INT[], associatedRequirements:Int[] ) 
    IF taskExists(task.uniqueID) 
        IF updateTask(task) 
            updateAssociatedTasks(task.uniqueID, associatedTasks) 
            updateAssociatedRequirements(task.uniqueID, associatedRequirements) 
        ELSE
            //displayUpdateFailed exist in gui
            displayUpdateFailed("ErrorSQL", task)
        END IF
    ELSE 
        IF NOT createTask(task) 
            //displayAddFailed exist in gui
            displayAddFailed("ErrorSQL", task)
        ELSE 
            addAssociatedTasks(task.uniqueID, associatedTasks) 
            addAssociatedRequirements(task.uniqueID, associatedRequirements) 
        END IF        
    END IF 
    RETURN taskSaved 
END saveTask 
//update task  
updateTask(task:Task)  
    //database attributes validations will be verified in gui and database part of the program
    IF queryUpdateTaskDatabase(task.uniqueID,
                                task.Name,
                                task.description,
                                task.expectedStartDate,
                                task.expectedEndDate,
                                task.expectedDuration,
                                task.expectedEffort,
                                task.actualStartDate,
                                task.actualEndDate,
                                task.actualDuration,
                                task.effortCompleted,
                                task.actualEffort,
                                task.percentComplete,
                                task.deliverableID,
                                task.taskType,
                                task.parentID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END updateTask
//delete task 
deleteTask(taskID:Int) 
    IF taskExists(taskID)
        queryDeleteTaskFromDatabase(taskID) 
        RETURN true
    ELSE
        RETURN false
    END IF
END deleteTask
