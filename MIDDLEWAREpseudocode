//here goes the middleware pseudocode 
requirementExists(requirementID:Int)
    IF queryRequirementDatabase(requirementID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END requirementExists

createRequirement(requirement:Requirement)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToRequirementDatabase(requirement.uniqueID,
                                    requirement.Name,
                                    requirement.deliverableID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END createRequirement

deleteRequirement(requirementID:INT)

//update Requirement  
updateRequirement(requirement:Requirement)  
    //database attributes validations will be verified in gui and database part of the program
    IF queryUpdateRequirementDatabase(requirement.uniqueID,
                                    requirement.Name,
                                    requirement.deliverableID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END updateRequirement


deliverableExists(deliverableID:Int)
    IF queryDeliverableDatabase(deliverableID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END deliverableExists

createDeliverable(deliverable:Deliverable)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToDeliverableDatabase(deliverable.uniqueID,
                                    deliverable.Name,
                                    deliverable.description,
                                    deliverable.dueDate)
        RETURN true
    ELSE
        RETURN false
    END IF 
END createDeliverable
//update the deliverable  
updateDeliverable(deliverable:Deliverable)  
    //database attributes validations will be verified in gui and database part of the program
    IF queryUpdateDeliverableDatabase(deliverable.uniqueID,
                                        deliverable.Name,
                                        deliverable.description,
                                        deliverable.dueDate)
        RETURN true
    ELSE
        RETURN false
    END IF 
END updateDeliverable

deleteDeliverable(deliverableID:Int) 
    IF deliverableExists(deliverableID)
        Task[] associatedTasks=queryTaskDatabaseWithConnectedDeliverable(deliverableID)
        FOR EACH task IN associatedTasks
            deleteTask(associatedTasks.uniqueID)
        END FOR
        queryDeleteDeliverableFromDatabase(deliverableID) 
        RETURN true
    ELSE
        RETURN false
    END IF
END deleteDeliverable 

//save the deliverable 
saveDeliverable(deliverable:Deliverable, associatedTasks:INT[], associatedRequirements:Int[] ) 
    IF deliverableExists(deliverable.uniqueID) 
        IF updateDeliverable(deliverable) 
            updateAssociatedTasks(deliverable.uniqueID, associatedTasks) 
            updateAssociatedRequirements(deliverable.uniqueID, associatedRequirements) 
        ELSE
            //displayUpdateFailed exist in gui
            displayUpdateFailed("ErrorSQL", deliverable)
        END IF
    ELSE 
        IF NOT createDeliverable(deliverable) 
            //displayAddFailed exist in gui
            displayAddFailed("ErrorSQL", deliverable)
        ELSE 
            addAssociatedTasks(deliverable.uniqueID, associatedTasks) 
            addAssociatedRequirements(deliverable.uniqueID, associatedRequirements) 
        END IF        
    END IF 
    RETURN deliverableSaved 
END saveDeliverable 

//get one deliverable
getDeliverable(deliverableID:Int)
    Deliverable deliverable = queryDeliverableDatabase(deliverableID)
    RETURN deliverable
END getDeliverable
//get one deliverable
getAllDeliverable()
    RETURN queryAllDeliverableDatabase()
END getDeliverable

 



addAssociatedTasks(deliverableID:INT, associatedTasks:INT[]) 
    FOR EACH task IN associatedTasks
        Task temp = queryTaskDatabase(task)
        temp.deliverableID=deliverableID
        IF NOT updateTask(temp)
            //displayUpdateFailed exist in gui
            displayUpdateFailed("ErrorSQL", temp)
        END IF
    END FOR
END addAssociatedTasks

addAssociatedRequirements(deliverableID:INT, associatedRequirements:INT[]) 
    FOR EACH requirment IN associatedRequirements
        Requirment temp = queryRequirmentDatabase(requirment)
        temp.deliverableID=deliverableID
        IF NOT updateRequirement(temp)
            //displayUpdateFailed exist in gui
            displayUpdateFailed("ErrorSQL", temp)
        END IF
    END FOR
END addAssociatedRequirements


//add task  
taskExists(taskID:Int)
    IF queryTaskDatabase(taskID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END taskExists
//save task  

//update task  
updateTask(task:Task)  
    //database attributes validations will be verified in gui and database part of the program
    IF queryUpdateTaskDatabase(task.uniqueID,
                                task.Name,
                                task.description,
                                task.expectedStartDate,
                                task.expectedEndDate,
                                task.expectedDuration,
                                task.expectedEffort,
                                task.actualStartDate,
                                task.actualEndDate,
                                task.actualDuration,
                                task.effortCompleted,
                                task.actualEffort,
                                task.percentComplete,
                                task.deliverableID,
                                task.taskType,
                                task.parentID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END updateTask
//delete task 
deleteTask(taskID:Int) 
