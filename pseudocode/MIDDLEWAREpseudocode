//here goes the middleware pseudocode 

//default values lists
//get one queryPriorityDefault
getPriorityDefault(priorityDefaultID:Int)
    RETURN queryPriorityDefaultDatabase(priorityDefaultID)
END getPriorityDefault
//get one queryPriorityDefault
getAllPriorityDefault()
    RETURN queryAllPriorityDefaultDatabase()
END getPriorityDefault
priorityDefaultExists(priorityDefaultID:Int)
    IF queryPriorityDefaultDatabase(priorityDefaultID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END priorityDefaultExists
createPriorityDefault(priorityDefault:PriorityDefault)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToPriorityDefaultDatabase(priorityDefault.uniqueID, priorityDefault.name)
        RETURN true
    ELSE
        RETURN false
    END IF 
END createPriorityDefault
deletePriorityDefault(priorityDefaultID:Int) 
    IF priorityDefaultExists(priorityDefaultID)
        queryDeletePriorityDefaultFromDatabase(priorityDefaultID) 
        RETURN true
    ELSE
        RETURN false
    END IF
END deletePriorityDefault
updatePriorityDefault(priorityDefault:PriorityDefault)  
    //database attributes validations will be verified in gui and database part of the program
    IF queryUpdateTaskDatabase(priorityDefault.uniqueID,
                                priorityDefault.name)
        RETURN true
    ELSE
        RETURN false
    END IF 
END updatePriorityDefault
savePriorityDefault(priorityDefault:PriorityDefault)  
    IF priorityDefaultExists(priorityDefault.uniqueID) 
        IF NOT updatePriorityDefault(priorityDefault) 
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", task)
        END IF
    ELSE 
        IF NOT createPriorityDefault(priorityDefault) 
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", priorityDefault)
        END IF        
    END IF 
    RETURN priorityDefaultSaved
END savePriorityDefault 
//get one SeverityDefault
getSeverityDefault(id:Int)
    RETURN querySeverityDefaultDatabase(id)
END getSeverityDefault
//get one querySeverityDefault
getAllSeverityDefault()
    RETURN queryAllSeverityDefaultDatabase()
END getSeverityDefault
severityDefaultExists(severityDefaultID:Int)
    IF querySeverityDefaultDatabase(severityDefaultID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END severityDefaultExists
createSeverityDefault(severityDefault:SeverityDefault)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToSeverityDefaultDatabase(severityDefault.uniqueID, severityDefault.name)
        RETURN true
    ELSE
        RETURN false
    END IF 
END createSeverityDefault
deleteSeverityDefault(severityDefaultID:Int) 
    IF severityDefaultExists(severityDefaultID)
        queryDeleteSeverityDefaultFromDatabase(severityDefaultID) 
        RETURN true
    ELSE
        RETURN false
    END IF
END deleteSeverityDefault
updateSeverityDefault(severityDefault:SeverityDefault)  
    //database attributes validations will be verified in gui and database part of the program
    IF queryUpdateTaskDatabase(severityDefault.uniqueID,
                                severityDefault.name)
        RETURN true
    ELSE
        RETURN false
    END IF 
END updateSeverityDefault
saveSeverityDefault(severityDefault:SeverityDefault)  
    IF severityDefaultExists(severityDefault.uniqueID) 
        IF NOT updateSeverityDefault(severityDefault) 
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", task)
        END IF
    ELSE 
        IF NOT createSeverityDefault(severityDefault) 
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", severityDefault)
        END IF        
    END IF 
    RETURN severityDefaultSaved
END saveSeverityDefault 
//get one ImpactDefault
getImpactDefault(id:Int)
    RETURN queryImpactDefaultDatabase(id)
END getImpactDefault
//get one queryImpactDefault
getAllImpactDefault()
    RETURN queryAllImpactDefaultDatabase()
END getImpactDefault
impactDefaultExists(impactDefaultID:Int)
    IF queryImpactDefaultDatabase(impactDefaultID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END impactDefaultExists
createImpactDefault(impactDefault:ImpactDefault)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToImpactDefaultDatabase(impactDefault.uniqueID, impactDefault.name)
        RETURN true
    ELSE
        RETURN false
    END IF 
END createImpactDefault
deleteImpactDefault(impactDefaultID:Int) 
    IF impactDefaultExists(impactDefaultID)
        queryDeleteImpactDefaultFromDatabase(impactDefaultID) 
        RETURN true
    ELSE
        RETURN false
    END IF
END deleteImpactDefault
updateImpactDefault(impactDefault:ImpactDefault)  
    //database attributes validations will be verified in gui and database part of the program
    IF queryUpdateTaskDatabase(impactDefault.uniqueID,
                                impactDefault.name)
        RETURN true
    ELSE
        RETURN false
    END IF 
END updateImpactDefault
saveImpactDefault(impactDefault:ImpactDefault)  
    IF impactDefaultExists(impactDefault.uniqueID) 
        IF NOT updateImpactDefault(impactDefault) 
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", task)
        END IF
    ELSE 
        IF NOT createImpactDefault(impactDefault) 
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", impactDefault)
        END IF        
    END IF 
    RETURN impactDefaultSaved
END saveImpactDefault 
//get one StatusDefault
getStatusDefault(id:Int)
    RETURN queryStatusDefaultDatabase(id)
END getStatusDefault
//get one queryStatusDefault
getAllStatusDefault()
    RETURN queryAllStatusDefaultDatabase()
END getStatusDefault
statusDefaultExists(statusDefaultID:Int)
    IF queryStatusDefaultDatabase(statusDefaultID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END statusDefaultExists
createStatusDefault(statusDefault:StatusDefault)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToStatusDefaultDatabase(statusDefault.uniqueID, statusDefault.name)
        RETURN true
    ELSE
        RETURN false
    END IF 
END createStatusDefault
deleteStatusDefault(statusDefaultID:Int) 
    IF statusDefaultExists(statusDefaultID)
        queryDeleteStatusDefaultFromDatabase(statusDefaultID) 
        RETURN true
    ELSE
        RETURN false
    END IF
END deleteStatusDefault
updateStatusDefault(statusDefault:StatusDefault)  
    //database attributes validations will be verified in gui and database part of the program
    IF queryUpdateTaskDatabase(statusDefault.uniqueID,
                                statusDefault.name)
        RETURN true
    ELSE
        RETURN false
    END IF 
END updateStatusDefault
saveStatusDefault(statusDefault:StatusDefault)  
    IF statusDefaultExists(statusDefault.uniqueID) 
        IF NOT updateStatusDefault(statusDefault) 
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", task)
        END IF
    ELSE 
        IF NOT createStatusDefault(statusDefault) 
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", statusDefault)
        END IF        
    END IF 
    RETURN statusDefaultSaved
END saveStatusDefault 
//get one CategoryDefault
getCategoryDefault(id:Int)
    RETURN queryCategoryDefaultDatabase(id)
END getCategoryDefault
//get one queryCategoryDefault
getAllCategoryDefault()
    RETURN queryAllCategoryDefaultDatabase()
END getCategoryDefault
categoryDefaultExists(categoryDefaultID:Int)
    IF queryCategoryDefaultDatabase(categoryDefaultID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END categoryDefaultExists
createCategoryDefault(categoryDefault:CategoryDefault)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToCategoryDefaultDatabase(categoryDefault.uniqueID, categoryDefault.name)
        RETURN true
    ELSE
        RETURN false
    END IF 
END createCategoryDefault
deleteCategoryDefault(categoryDefaultID:Int) 
    IF categoryDefaultExists(categoryDefaultID)
        queryDeleteCategoryDefaultFromDatabase(categoryDefaultID) 
        RETURN true
    ELSE
        RETURN false
    END IF
END deleteCategoryDefault
updateCategoryDefault(categoryDefault:CategoryDefault)  
    //database attributes validations will be verified in gui and database part of the program
    IF queryUpdateTaskDatabase(categoryDefault.uniqueID,
                                categoryDefault.name)
        RETURN true
    ELSE
        RETURN false
    END IF 
END updateCategoryDefault
saveCategoryDefault(categoryDefault:CategoryDefault)  
    IF categoryDefaultExists(categoryDefault.uniqueID) 
        IF NOT updateCategoryDefault(categoryDefault) 
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", task)
        END IF
    ELSE 
        IF NOT createCategoryDefault(categoryDefault) 
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", categoryDefault)
        END IF        
    END IF 
    RETURN categoryDefaultSaved
END saveCategoryDefault 

//requirement pseudocode
//get requirements
getRequirement(requirementID:Int)
    RETURN queryRequirementDatabase(requirementID)
END getRequirement
getAllRequirement()
    RETURN queryAllRequirementDatabase()
END getRequirement
requirementExists(requirementID:Int)
    IF getRequirement(requirementID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END requirementExists
//save the requirement 
saveRequirement(requirement:Requirement) 
    IF requirementExists(requirement.uniqueID) 
        IF NOT updateRequirement(requirement) 
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", requirement)
        END IF
    ELSE 
        IF NOT createRequirement(requirement) 
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", requirement)

        END IF        
    END IF 
    RETURN requirementSaved 
END saveRequirement 
createRequirement(requirement:Requirement)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToRequirementDatabase(requirement.uniqueID,
                                    requirement.name,
                                    requirement.deliverableID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END createRequirement

deleteRequirement(requirementID:INT)
    IF requirementExists(requirementID)
        Requirement requirement=queryRequirementDatabase(requirementID)
        Deliverable[] otherRequirementsWithSameDeliverable=queryRequirementDatabaseWithConnectedDeliverable(requirement.deliverableID)
        IF otherRequirementsWithSameDeliverable.length==0
            deleteDeliverable(requirement.deliverableID)
        END IF
        queryDeleteRequirementFromDatabase(requirementID) 
        RETURN true
    ELSE
        RETURN false
    END IF
END deleteRequirement
//update Requirement  
updateRequirement(requirement:Requirement)  
    //database attributes validations will be verified in gui and database part of the program
    IF queryUpdateRequirementDatabase(requirement.uniqueID,
                                    requirement.name,
                                    requirement.deliverableID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END updateRequirement

//deliverable pseudocode
//get deliverables
getDeliverable(deliverableID:Int)
    RETURN  queryDeliverableDatabase(deliverableID)
END getDeliverable
getAllDeliverable()
    RETURN queryAllDeliverableDatabase()
END getDeliverable
deliverableExists(deliverableID:Int)
    IF getDeliverable(deliverableID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END deliverableExists

createDeliverable(deliverable:Deliverable)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToDeliverableDatabase(deliverable.uniqueID,
                                    deliverable.name,
                                    deliverable.description,
                                    deliverable.dueDate)
        RETURN true
    ELSE
        RETURN false
    END IF 
END createDeliverable
//update the deliverable  
updateDeliverable(deliverable:Deliverable)  
    //database attributes validations will be verified in gui and database part of the program
    IF queryUpdateDeliverableDatabase(deliverable.uniqueID,
                                        deliverable.name,
                                        deliverable.description,
                                        deliverable.dueDate)
        RETURN true
    ELSE
        RETURN false
    END IF 
END updateDeliverable

deleteDeliverable(deliverableID:Int) 
    IF deliverableExists(deliverableID)
        Task[] associatedTasks=queryTaskDatabaseWithConnectedDeliverable(deliverableID)
        FOR EACH task IN associatedTasks
            removeAssociatedTasks(associatedTasks.uniqueID)
            removeAssociated(associatedTasks.uniqueID)
        END FOR
        queryDeleteDeliverableFromDatabase(deliverableID) 
        RETURN true
    ELSE
        RETURN false
    END IF
END deleteDeliverable 

//save the deliverable 
saveDeliverable(deliverable:Deliverable, associatedTasks:INT[], associatedRequirements:Int[] ) 
    IF deliverableExists(deliverable.uniqueID) 
        IF updateDeliverable(deliverable) 
            updateAssociatedTasks(deliverable.uniqueID, associatedTasks) 
            updateAssociatedRequirements(deliverable.uniqueID, associatedRequirements) 
        ELSE
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", deliverable)
        END IF
    ELSE 
        IF NOT createDeliverable(deliverable) 
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", deliverable)
        ELSE 
            addAssociatedTasks(deliverable.uniqueID, associatedTasks) 
            addAssociatedRequirements(deliverable.uniqueID, associatedRequirements) 
        END IF        
    END IF 
    RETURN deliverableSaved 
END saveDeliverable 


updateAssociatedTasks(deliverableID:INT, associatedTasks:INT[]) 
    Task[] tasks=queryTaskDatabaseWithConnectedDeliverable(deliverableID)
    FOR EACH task IN tasks
        removeAssociatedTasks(task.uniqueID) 
    END FOR
    addAssociatedTasks(deliverableID, associatedTasks) 
END updateAssociatedTasks

updateAssociatedRequirements(deliverableID:INT, associatedRequirements:INT[]) 
    Requirements[] requirements=queryRequirementDatabaseWithConnectedDeliverable(deliverableID)
    FOR EACH requirement IN requirements
        removeAssociatedRequirements(requirement.uniqueID) 
    END FOR
    addAssociatedRequirements(deliverableID, associatedTasks) 
END updateAssociatedRequirements

removeAssociatedTasks(taskID:INT) 
    Task task=queryTaskDatabase(taskID)
    task.deliverableID=NULL
     IF NOT updateTask(task)
        //displayUpdateFailed exist in gui
        RETURN displayUpdateFailed("ErrorSQL", temp)
    END IF    
END removeAssociatedTasks
removeAssociatedRequirements(requirementID:INT) 
    Requirement requirement=queryTaskDatabase(requirementID)
    requirement.deliverableID=NULL
     IF NOT updateRequirement(requirement)
        //displayUpdateFailed exist in gui
        RETURN displayUpdateFailed("ErrorSQL", temp)
    END IF    
END removeAssociatedTasks
addAssociatedTasks(deliverableID:INT, associatedTasks:INT[]) 
    FOR EACH task IN associatedTasks
        Task temp = queryTaskDatabase(task)
        temp.deliverableID=deliverableID
        IF NOT updateTask(temp)
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", temp)
        END IF
    END FOR
END addAssociatedTasks

addAssociatedRequirements(deliverableID:INT, associatedRequirements:INT[]) 
    FOR EACH requirement IN associatedRequirements
        Requirement temp = getRequirement(requirement)
        temp.deliverableID=deliverableID
        IF NOT updateRequirement(temp)
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", temp)
        END IF
    END FOR
END addAssociatedRequirements

//task pseudocode
//get one tasks
getTask(taskID:Int)
    RETURN queryTaskDatabase(taskID)
END getTask
getAllTask()
    RETURN queryAllTaskDatabase()
END getTask
taskExists(taskID:Int)
    IF getTask(taskID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END taskExists

//create task  
createTask(deliverable:Task)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToTaskDatabase(task.uniqueID,
                                task.name,
                                task.description,
                                task.expectedStartDate,
                                task.expectedEndDate,
                                task.expectedDuration,
                                task.expectedEffort,
                                task.actualStartDate,
                                task.actualEndDate,
                                task.actualDuration,
                                task.effortCompleted,
                                task.actualEffort,
                                task.percentComplete,
                                task.deliverableID,
                                task.taskType,
                                task.parentID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END createTask

//save task  
saveTask(task:Task, associatedIssues:INT[],associatedResources:INT[], predecessorsTasks:INT[],successorsTasks:INT[]) 
    IF taskExists(task.uniqueID) 
        IF updateTask(task) 
            updateAssociatedIssues(task.uniqueID, associatedIssues) 
            updateAssociatedResources(task.uniqueID, associatedResources) 
            updatePredecessorsTasks(task.uniqueID, predecessorsTasks) 
            updateSuccessorsTasks(task.uniqueID, successorsTasks) 
        ELSE
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", task)
        END IF
    ELSE 
        IF NOT createTask(task) 
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", task)
        ELSE 
            addAssociatedIssues(task.uniqueID, associatedIssues) 
            addAssociatedResources(task.uniqueID, associatedResources) 
            addPredecessorsTasks(task.uniqueID, predecessorsTasks) 
            addSuccessorsTasks(task.uniqueID, successorsTasks) 

        END IF        
    END IF 
    RETURN taskSaved 
END saveTask 
//update task  
updateTask(task:Task)  
    //database attributes validations will be verified in gui and database part of the program
    IF queryUpdateTaskDatabase(task.uniqueID,
                                task.name,
                                task.description,
                                task.expectedStartDate,
                                task.expectedEndDate,
                                task.expectedDuration,
                                task.expectedEffort,
                                task.actualStartDate,
                                task.actualEndDate,
                                task.actualDuration,
                                task.effortCompleted,
                                task.actualEffort,
                                task.percentComplete,
                                task.deliverableID,
                                task.taskType,
                                task.parentID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END updateTask
//delete task 
deleteTask(taskID:Int) 
    IF taskExists(taskID)
        queryDeleteTaskFromDatabase(taskID) 
        RETURN true
    ELSE
        RETURN false
    END IF
END deleteTask




//add those 
addAssociatedIssues(taskID:INT, associatedIssues:INT[]) 
    FOR EACH issue IN associatedIssues
        IF NOT createTaskIssueRealtion(issue,taskID)
            RETURN displayUpdateFailed("ErrorSQL", "task issue relation")
        END IF
    END FOR
END addAssociatedIssues
addAssociatedResources(taskID:INT, associatedResources:INT[]) 
    FOR EACH resource IN associatedResources
        IF NOT createTaskResourceRealtion(resource,taskID)
            RETURN displayUpdateFailed("ErrorSQL", "task resource relation")
        END IF
    END FOR
END addAssociatedResources
addPredecessorsTasks(taskID:INT, predecessorsTasks:INT[]) 
    FOR EACH predecessorTask IN predecessorsTasks
        IF NOT createTaskPredecessor(issue,taskID)
            RETURN displayUpdateFailed("ErrorSQL", "task predecessor relation")
        END IF
    END FOR
END addPredecessorsTasks

addSuccessorsTasks(taskID:INT, successorsTasks:INT[]) 
    FOR EACH successorTask IN successorsTasks
        IF NOT createTaskPredecessor(issue,taskID)
            RETURN displayUpdateFailed("ErrorSQL", "task successor relation")
        END IF
    END FOR
END addSuccessorsTasks

updateAssociatedIssues(taskID:INT, associatedIssues:INT[])
    queryDeleteTaskIssuesRelationsFromDatabase(getIssuesWithTask(taskID))
    addAssociatedIssues(taskID, associatedIssues) 
END updateAssociatedIssues 
updateAssociatedResources(taskID:INT, associatedResources:INT[]) 
    queryDeleteTaskResourcesRelationsFromDatabase(getResourcesWithTask(taskID))
    addAssociatedResources(taskID, associatedResources) 
END updateAssociatedResources

updatePredecessorsTasks(taskID:INT, predecessorsTasks:INT[]) 
    queryDeletePredecessorsTasksFromDatabase(getTaskPredecessors(taskID))
    addPredecessorsTasks(taskID, predecessorsTasks) 
END updatePredecessorsTasks
updateSuccessorsTasks(taskID:INT, successorsTasks:INT[]) 
    queryDeleteSuccessorsTasksFromDatabase(getTaskSuccessors(taskID))
    addAssociatedResources(taskID, successorsTasks) 
END updateSuccessorsTasks

//tasks issues relation
getIssuesWithTask(taskID:INT)
    RETURN queryTaskIssuesRelationsFromDatabase(taskID, "task")
END getIssuesWithTask
getTaskWithIssue(issueID:INT)
    RETURN queryTaskIssuesRelationsFromDatabase(issueID, "issue")
END getIssuesWithIssue

createTaskIssueRealtion(issueID:INT,taskID:INT)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToIssuesRelationsDatabase(issueID,taskID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END addTaskIssueRealtion


//tasks resources relation
getResourcesWithTask(taskID:INT)
    RETURN queryTaskResourcesRelationsFromDatabase(taskID, "task")
END getResourcesWithTask
getTaskWithResource(resourceID:INT)
    RETURN queryTaskResourcesRelationsFromDatabase(resourceID, "resource")
END getResourcesWithResource

createTaskResourceRealtion(resourceID:INT,taskID:INT)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToResourcesRelationsDatabase(resourceID,taskID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END addTaskResourceRealtion

//tasks predecessors relation
getTaskPredecessors(taskID:INT)
    RETURN queryTaskPredecessorsFromDatabase(taskID)
END getTaskPredecessors

createTaskPredecessor(taskID:INT,taskPredecessorID:INT)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToTaskPredecessorsDatabase(taskID,taskPredecessorID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END createTaskPredecessor

//tasks successors relation
getTaskSuccessors(taskID:INT)
    RETURN queryTaskSuccessorsFromDatabase(taskID)
END getTaskSuccessors

createTaskSuccessor(taskID:INT,taskSuccessorID:INT)
    //database attributes validations will be verified in gui and database part of the program
    IF queryAddToTaskSuccessorsDatabase(taskID,taskSuccessorID)
        RETURN true
    ELSE
        RETURN false
    END IF 
END createTaskSuccessor




