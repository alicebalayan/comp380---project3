//here goes the middleware pseudocode 
//comments describe what each function does

//deliverable pseudocode
createDeliverable(deliverable:Deliverable)
    IF addToDeliverableDatabase(deliverable.uniqueID,
                                    deliverable.name,
                                    deliverable.description,
                                    deliverable.dueDate)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createDeliverable
//update the deliverable  
updateDeliverable(deliverable:Deliverable)  
    IF updateDeliverableDatabase(deliverable.uniqueID,
                                        deliverable.name,
                                        deliverable.description,
                                        deliverable.dueDate)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateDeliverable

deleteDeliverable(deliverableID:Int) 
    IF deliverableExists(deliverableID)
        unassociateTasks(deliverableID)
        deleteDeliverableFromDatabase(deliverableID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
    
END deleteDeliverable 

saveDeliverable(deliverable:Deliverable, associatedTasks:INT[], associatedRequirements:Int[] ) 
    IF deliverableExists(deliverable.uniqueID) 
        IF updateDeliverable(deliverable) 
            updateAssociatedTasks(deliverable.uniqueID, associatedTasks) 
            updateAssociatedRequirements(deliverable.uniqueID, associatedRequirements) 
        ELSE
            RETURN displayUpdateFailed()
        END IF
    ELSE 
        IF createDeliverable(deliverable) EQUALS operationFailed
            RETURN displayAddFailed()
        ELSE 
            addAssociatedTasks(deliverable.uniqueID, associatedTasks) 
            addAssociatedRequirements(deliverable.uniqueID, associatedRequirements) 
        END IF        
    END IF 
    RETURN deliverableSaved 
END saveDeliverable 


updateAssociatedTasks(deliverableID:INT, associatedTasks:INT[]) 
    get All Tasks Connected To Deliverable
    FOR EACH task IN tasks
        unassociateTasks(task.uniqueID) 
    END FOR
    addAssociatedTasks(deliverableID, associatedTasks) 
END updateAssociatedTasks

updateAssociatedRequirements(deliverableID:INT, associatedRequirements:INT[]) 
    get All Requirements Connected To Deliverable
    FOR EACH requirement IN requirements
        unassociateRequirements(requirement.uniqueID) 
    END FOR
    addAssociatedRequirements(deliverableID, associatedTasks) 
END updateAssociatedRequirements

addAssociatedTasks(deliverableID:INT, associatedTasks:INT[]) 
    FOR EACH task IN associatedTasks
        task.deliverableID=deliverableID
        IF updateTask(task) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    END FOR
END addAssociatedTasks

addAssociatedRequirements(deliverableID:INT, associatedRequirements:INT[]) 
    FOR EACH requirement IN associatedRequirements
        requirement.deliverableID=deliverableID
        IF updateRequirement(requirement) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    END FOR
END addAssociatedRequirements

//task pseudocode
createTask(task:Task)
    IF addToTaskDatabase(task.uniqueID,
                                task.name,
                                task.description,
                                task.expectedStartDate,
                                task.expectedEndDate,
                                task.expectedDuration,
                                task.expectedEffort,
                                task.actualStartDate,
                                task.actualEndDate,
                                task.actualDuration,
                                task.effortCompleted,
                                task.actualEffort,
                                task.percentComplete,
                                task.deliverableID,
                                task.taskType,
                                task.parentID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createTask

saveTask(task:Task, associatedIssues:INT[],associatedResources:INT[], predecessorsTasks:INT[],successorsTasks:INT[]) 
    IF taskExists(task.uniqueID) 
        IF updateTask(task) 
            updateAssociatedIssues(task.uniqueID, associatedIssues) 
            updateAssociatedResources(task.uniqueID, associatedResources) 
            updatePredecessorsTasks(task.uniqueID, predecessorsTasks) 
            updateSuccessorsTasks(task.uniqueID, successorsTasks) 
        ELSE
            RETURN displayUpdateFailed()
        END IF
    ELSE 
        IF createTask(task) EQUALS operationFailed
            RETURN displayAddFailed()
        ELSE 
            addAssociatedIssues(task.uniqueID, associatedIssues) 
            addAssociatedResources(task.uniqueID, associatedResources) 
            addPredecessorsTasks(task.uniqueID, predecessorsTasks) 
            addSuccessorsTasks(task.uniqueID, successorsTasks) 

        END IF        
    END IF 
    RETURN taskSaved 
END saveTask 
updateTask(task:Task)  

    IF updateTaskDatabase(task.uniqueID,
                                task.name,
                                task.description,
                                task.expectedStartDate,
                                task.expectedEndDate,
                                task.expectedDuration,
                                task.expectedEffort,
                                task.actualStartDate,
                                task.actualEndDate,
                                task.actualDuration,
                                task.effortCompleted,
                                task.actualEffort,
                                task.percentComplete,
                                task.deliverableID,
                                task.taskType,
                                task.parentID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateTask
deleteTask(taskID:Int) 
    IF taskExists(taskID)
        deleteTaskFromDatabase(taskID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteTask
addAssociatedIssues(taskID:INT, associatedIssues:INT[]) 
    FOR EACH issue IN associatedIssues
        IF createTaskIssueRealtion(issue,taskID) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    END FOR
END addAssociatedIssues
addAssociatedResources(taskID:INT, associatedResources:INT[]) 
    FOR EACH resource IN associatedResources
        IF createTaskResourceRealtion(resource,taskID) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    END FOR
END addAssociatedResources
addPredecessorsTasks(taskID:INT, predecessorsTasks:INT[]) 
    FOR EACH predecessorTask IN predecessorsTasks
        IF createTaskPredecessor(issue,taskID) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    END FOR
END addPredecessorsTasks

addSuccessorsTasks(taskID:INT, successorsTasks:INT[]) 
    FOR EACH successorTask IN successorsTasks
        IF createTaskPredecessor(issue,taskID) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    END FOR
END addSuccessorsTasks

updateAssociatedIssues(taskID:INT, associatedIssues:INT[])
    deleteTaskIssuesRelationsFromDatabase(taskID)
    addAssociatedIssues(taskID, associatedIssues) 
END updateAssociatedIssues 
updateAssociatedResources(taskID:INT, associatedResources:INT[]) 
    deleteTaskResourcesRelationsFromDatabase(taskID)
    addAssociatedResources(taskID, associatedResources) 
END updateAssociatedResources

updatePredecessorsTasks(taskID:INT, predecessorsTasks:INT[]) 
    deletePredecessorsTasksFromDatabase(taskID)
    addPredecessorsTasks(taskID, predecessorsTasks) 
END updatePredecessorsTasks
updateSuccessorsTasks(taskID:INT, successorsTasks:INT[]) 
    deleteSuccessorsTasksFromDatabase(taskID)
    addAssociatedResources(taskID, successorsTasks) 
END updateSuccessorsTasks

//tasks issues relation
createTaskIssueRealtion(issueID:INT,taskID:INT)
    IF addToIssuesRelationsDatabase(issueID,taskID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END addTaskIssueRealtion


//tasks resources relation
createTaskResourceRealtion(resourceID:INT,taskID:INT)
    IF addToResourcesRelationsDatabase(resourceID,taskID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END addTaskResourceRealtion

//tasks predecessors relation
createTaskPredecessor(taskID:INT,taskPredecessorID:INT)

    IF addToTaskPredecessorsDatabase(taskID,taskPredecessorID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createTaskPredecessor
createTaskSuccessor(taskID:INT,taskSuccessorID:INT)

    IF addToTaskSuccessorsDatabase(taskID,taskSuccessorID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createTaskSuccessor
//requirement pseudocode
saveRequirement(requirement:Requirement) 
    IF requirementExists(requirement.uniqueID) 
        IF updateRequirement(requirement) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    ELSE 
        IF createRequirement(requirement) EQUALS operationFailed
            RETURN displayAddFailed()

        END IF        
    END IF 
    RETURN requirementSaved 
END saveRequirement 
createRequirement(requirement:Requirement)

    IF addToRequirementDatabase(requirement.uniqueID,
                                    requirement.name,
                                    requirement.deliverableID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createRequirement

deleteRequirement(requirementID:INT)
    IF requirementExists(requirementID)
        deleteRequirementFromDatabase(requirementID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteRequirement
updateRequirement(requirement:Requirement)  
    IF updateRequirementDatabase(requirement.uniqueID,
                                    requirement.name,
                                    requirement.deliverableID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateRequirement

//issue pseudocode
createIssue(issue:Issue)
    IF addToIssueDatabase(issue.uniqueID,
                                issue.name,
                                issue.description,
                                issue.priority,
                                issue.severity,
                                issue.dateRaised ,
                                issue.dateAssigned,
                                issue.expectedCompletionDate,
                                issue.actualCompletionDate,
                                issue.status,
                                issue.statusDescription,
                                issue.updateDate)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createIssue
saveIssue(issue:Issue, associatedDecisions:INT[],associatedActionItems:INT[]) 
    IF issueExists(issue.uniqueID) 
        IF updateIssue(issue) 
            updateAssociatedDecisions(issue.uniqueID, associatedDecisions) 
            updateAssociatedActionItems(issue.uniqueID, associatedActionItems) 
        ELSE
            RETURN displayUpdateFailed()
        END IF
    ELSE 
        IF createIssue(issue) EQUALS operationFailed
            RETURN displayAddFailed()
        ELSE 
            addAssociatedDecisions(issue.uniqueID, associatedDecisions) 
            addAssociatedActionItems(issue.uniqueID, associatedActionItems) 

        END IF        
    END IF 
    RETURN issueSaved 
END saveIssue 

updateIssue(issue:Issue)  
    IF updateIssueDatabase(issue.uniqueID,
                                issue.name,
                                issue.description,
                                issue.priority,
                                issue.severity,
                                issue.dateRaised ,
                                issue.dateAssigned,
                                issue.expectedCompletionDate,
                                issue.actualCompletionDate,
                                issue.status,
                                issue.statusDescription,
                                issue.updateDate)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateIssue
deleteIssue(issueID:Int) 
    IF issueExists(issueID)
        deleteIssueFromDatabase(issueID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteIssue
updateAssociatedDecisions(issueID:INT, associatedDecisions:INT[]) 
    deleteIssuesDecisionsRelationsFromDatabase(issueID)
    addAssociatedDecisions(issueID, associatedDecisions) 
END updateAssociatedDecisions

updateAssociatedActionItems(issueID:INT, associatedActionItems:INT[]) 
    deleteIssuesActionItemsRelationsFromDatabase(issueID)
    addAssociatedActionItems(issueID, associatedActionItems) 
END updateAssociatedActionItems

addAssociatedDecisions(issueID:INT, associatedDecisions:INT[]) 
    FOR EACH decision IN associatedDecisions
        IF createActionItemRealtion(issueID,decision) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    END FOR
END addAssociatedDecisions

addAssociatedActionItems(issueID:INT, associatedActionItems:INT[]) 
    FOR EACH actionItem IN associatedActionItems
        IF createActionItemRealtion(issueID,actionItem) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    END FOR
END addAssociatedActionItems

//Action Items pseudocode
createActionItem(actionItem:ActionItem)
    IF addToActionItemDatabase(actionItem.uniqueID,
                                actionItem.name,
                                actionItem.description,
                                actionItem.dateCreated,
                                actionItem.dateAssigned,
                                actionItem.expectedCompletionDate,
                                actionItem.actualCompletionDate,
                                actionItem.status,
                                actionItem.statusDescription,
                                actionItem.updateDate,
                                actionItem.issueID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createActionItem

saveActionItem(actionItem:ActionItem, associatedResources:INT[]) 
    IF actionItemExists(actionItem.uniqueID) 
        IF updateActionItem(actionItem) 
            updateAssociatedResources(actionItem.uniqueID, associatedResources) 
        ELSE
            RETURN displayUpdateFailed()
        END IF
    ELSE 
        IF createActionItem(actionItem) EQUALS operationFailed
            RETURN displayAddFailed()
        ELSE 
            addAssociatedResources(actionItem.uniqueID, associatedResources) 

        END IF        
    END IF 
    RETURN actionItemSaved 
END saveActionItem
updateActionItem(actionItem:ActionItem)  
    IF updateActionItemDatabase(actionItem.uniqueID,
                                actionItem.name,
                                actionItem.description,
                                actionItem.dateCreated,
                                actionItem.dateAssigned,
                                actionItem.expectedCompletionDate,
                                actionItem.actualCompletionDate,
                                actionItem.status,
                                actionItem.statusDescription,
                                actionItem.updateDate,
                                actionItem.issueID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateActionItem
deleteActionItem(actionItemID:Int) 
    IF actionItemExists(actionItemID)
        deleteActionItemFromDatabase(actionItemID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteActionItem
updateAssociatedResources(actionItemID:INT, associatedResources:INT[]) 
    deleteActionItemResourcesRelationsFromDatabase(actionItemID)
    addAssociatedResources(actionItemID, associatedResources) 
END updateAssociatedResources
addAssociatedResources(actionItemID:INT, associatedResources:INT[]) 
    FOR EACH resource IN associatedResources
        IF createActionItemRealtion(issueID,resource) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    END FOR
END addAssociatedResources

//Decisions pseudocode
createDecision(decision:Decision)
    IF addToDecisionDatabase(decision.uniqueID,
                                decision.name,
                                decision.description,
                                decision.priority,
                                decision.impact,
                                decision.dateCreated,
                                decision.dateNeeded ,
                                decision.dateMade,
                                decision.expectedCompletionDate,
                                decision.actualCompletionDate,
                                decision.noteDate,
                                decision.status,
                                decision.statusDescription,
                                decision.updateDate)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createDecision
saveDecision(decision:Decision, associatedResources:INT[],associatedReferenceDocuments:INT[],associatedMeetingNotes:INT[]) 
    IF decisionExists(decision.uniqueID) 
        IF updateDecision(decision) 
            updateAssociatedResources(decision.uniqueID, associatedResources) 
            updateAssociatedReferenceDocuments(decision.uniqueID, associatedReferenceDocuments) 
            updateAssociatedMeetingNotes(decision.uniqueID, associatedMeetingNotes) 
        ELSE
            RETURN displayUpdateFailed()
        END IF
    ELSE 
        IF createDecision(decision) EQUALS operationFailed
            RETURN displayAddFailed()
        ELSE 
            addAssociatedResources(decision.uniqueID, associatedResources) 
            addAssociatedReferenceDocuments(decision.uniqueID, associatedReferenceDocuments) 
            addAssociatedMeetingNotes(decision.uniqueID, associatedMeetingNotes) 

        END IF        
    END IF 
    RETURN decisionSaved 
END saveDecision

updateDecision(decision:Decision)  
    IF updateDecisionDatabase(decision.uniqueID,
                                decision.name,
                                decision.description,
                                decision.priority,
                                decision.impact,
                                decision.dateCreated,
                                decision.dateNeeded ,
                                decision.dateMade,
                                decision.expectedCompletionDate,
                                decision.actualCompletionDate,
                                decision.noteDate,
                                decision.status,
                                decision.statusDescription,
                                decision.updateDate)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateDecision

deleteDecision(decisionID:Int) 
    IF decisionExists(decisionID)
        deleteDecisionFromDatabase(decisionID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteDecision



updateAssociatedResources(decisionID:INT, associatedResources:INT[]) 

updateAssociatedReferenceDocuments(decisionID:INT, associatedReferenceDocuments:INT[]) 

END updateAssociatedReferenceDocuments
updateAssociatedMeetingNotes(decisionID:INT, associatedMeetingNotes:INT[]) 
    deleteDecisionsMeetingNotesRelationsFromDatabase(decisionID)
    addAssociatedMeetingNotes(decisionID, associatedMeetingNotes)
END updateAssociatedMeetingNotes
addAssociatedResources(decisionID:INT, associatedResources:INT[]) 
   FOR EACH resource IN associatedResources
        IF createDecisionResourceRealtion(decisionID,associatedResources) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    END FOR
END addAssociatedResources
addAssociatedReferenceDocuments(decisionID:INT, associatedReferenceDocuments:INT[]) 
   FOR EACH referenceDocument IN associatedReferenceDocuments
        IF createDecisionReferenceDocumentRealtion(decisionID,referenceDocument) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    END FOR
END addAssociatedReferenceDocuments
addAssociatedMeetingNotes(decisionID:INT, associatedMeetingNotes:INT[])
   FOR EACH meetingNote IN associatedMeetingNotes
        IF createDecisionMeetingNoteRealtion(decisionID,meetingNote) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    END FOR
END addAssociatedMeetingNotes

//Resources pseudocode
createResource(resource:Resource)
    IF addToResourceDatabase(resource.uniqueID,
                                resource.name,
                                resource.actionItemID,
                                resource.decisionID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createResource
updateResource(resource:Resource)  
    IF updateResourceDatabase(resource.uniqueID,
                                resource.name,
                                resource.actionItemID,
                                resource.decisionID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateResource

saveResource(resource:Resource) 
    IF resourceExists(resource.uniqueID) 
        IF updateResource(resource) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    ELSE 
        IF createResource(resource) EQUALS operationFailed
            RETURN displayAddFailed()
        END IF        
    END IF 
    RETURN resourceSaved 
END saveResource
deleteResource(resourceID:Int) 
    IF resourceExists(resourceID)
        deleteResourceFromDatabase(resourceID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteResource
//Reference Documents pseudocode
createReferenceDocument(referenceDocument:ReferenceDocument)
    IF addToReferenceDocumentDatabase(referenceDocument.uniqueID,
                                referenceDocument.name,
                                referenceDocument.decisionID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createReferenceDocument

updateReferenceDocument(referenceDocument:ReferenceDocument)  
    IF updateReferenceDocumentDatabase(referenceDocument.uniqueID,
                                referenceDocument.name,
                                referenceDocument.decisionID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateReferenceDocument

saveReferenceDocument(referenceDocument:ReferenceDocument) 
    IF referenceDocumentExists(referenceDocument.uniqueID) 
        IF updateReferenceDocument(referenceDocument) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    ELSE 
        IF createReferenceDocument(referenceDocument) EQUALS operationFailed
            RETURN displayAddFailed()
        END IF        
    END IF 
    RETURN referenceDocumentSaved 
END saveReferenceDocument
deleteReferenceDocument(referenceDocumentID:Int) 
    IF referenceDocumentExists(referenceDocumentID)
        deleteReferenceDocumentFromDatabase(referenceDocumentID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteReferenceDocument

//Meeting  Notes pseudocode
createMeetingNote(meetingNote:MeetingNote)
    IF addToMeetingNoteDatabase(meetingNote.uniqueID,
                                meetingNote.name,
                                meetingNote.note,
                                meetingNote.decisionID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createMeetingNote

updateMeetingNote(meetingNote:MeetingNote)  
    IF updateMeetingNoteDatabase(meetingNote.uniqueID,
                                meetingNote.name,
                                meetingNote.note,
                                meetingNote.decisionID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateMeetingNote
saveMeetingNote(meetingNote:MeetingNote) 
    IF meetingNoteExists(meetingNote.uniqueID) 
        IF updateMeetingNote(meetingNote) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    ELSE 
        IF createMeetingNote(meetingNote) EQUALS operationFailed
            RETURN displayAddFailed()
        END IF        
    END IF 
    RETURN meetingNoteSaved 
END saveMeetingNote
deleteMeetingNote(meetingNoteID:Int) 
    IF meetingNoteExists(meetingNoteID)
        deleteMeetingNoteFromDatabase(meetingNoteID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteMeetingNote
//default values lists
createPriorityDefault(priorityDefault:PriorityDefault)
    IF addToPriorityDefaultDatabase(priorityDefault.uniqueID, priorityDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createPriorityDefault
deletePriorityDefault(priorityDefaultID:Int) 
    IF priorityDefaultExists(priorityDefaultID)
        deletePriorityDefaultFromDatabase(priorityDefaultID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deletePriorityDefault
updatePriorityDefault(priorityDefault:PriorityDefault)  

    IF updateTaskDatabase(priorityDefault.uniqueID,
                                priorityDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updatePriorityDefault
savePriorityDefault(priorityDefault:PriorityDefault)  
    IF priorityDefaultExists(priorityDefault.uniqueID) 
        IF updatePriorityDefault(priorityDefault) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    ELSE 
        IF createPriorityDefault(priorityDefault) EQUALS operationFailed
            RETURN displayAddFailed()
        END IF        
    END IF 
    RETURN priorityDefaultSaved
END savePriorityDefault 

createSeverityDefault(severityDefault:SeverityDefault)

    IF addToSeverityDefaultDatabase(severityDefault.uniqueID, severityDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createSeverityDefault
deleteSeverityDefault(severityDefaultID:Int) 
    IF severityDefaultExists(severityDefaultID)
        deleteSeverityDefaultFromDatabase(severityDefaultID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteSeverityDefault
updateSeverityDefault(severityDefault:SeverityDefault)  
    IF updateTaskDatabase(severityDefault.uniqueID,
                                severityDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateSeverityDefault
saveSeverityDefault(severityDefault:SeverityDefault)  
    IF severityDefaultExists(severityDefault.uniqueID) 
        IF updateSeverityDefault(severityDefault) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    ELSE 
        IF createSeverityDefault(severityDefault) EQUALS operationFailed
            RETURN displayAddFailed()
        END IF        
    END IF 
    RETURN severityDefaultSaved
END saveSeverityDefault 
createImpactDefault(impactDefault:ImpactDefault)
    IF addToImpactDefaultDatabase(impactDefault.uniqueID, impactDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createImpactDefault
deleteImpactDefault(impactDefaultID:Int) 
    IF impactDefaultExists(impactDefaultID)
        deleteImpactDefaultFromDatabase(impactDefaultID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteImpactDefault
updateImpactDefault(impactDefault:ImpactDefault)  

    IF updateTaskDatabase(impactDefault.uniqueID,
                                impactDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateImpactDefault
saveImpactDefault(impactDefault:ImpactDefault)  
    IF impactDefaultExists(impactDefault.uniqueID) 
        IF updateImpactDefault(impactDefault) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    ELSE 
        IF createImpactDefault(impactDefault) EQUALS operationFailed
            RETURN displayAddFailed()
        END IF        
    END IF 
    RETURN impactDefaultSaved
END saveImpactDefault 

createStatusDefault(statusDefault:StatusDefault)
    IF addToStatusDefaultDatabase(statusDefault.uniqueID, statusDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createStatusDefault
deleteStatusDefault(statusDefaultID:Int) 
    IF statusDefaultExists(statusDefaultID)
        deleteStatusDefaultFromDatabase(statusDefaultID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteStatusDefault
updateStatusDefault(statusDefault:StatusDefault)  
    IF updateTaskDatabase(statusDefault.uniqueID,
                                statusDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateStatusDefault
saveStatusDefault(statusDefault:StatusDefault)  
    IF statusDefaultExists(statusDefault.uniqueID) 
        IF updateStatusDefault(statusDefault) EQUALS operationFailed

            RETURN displayUpdateFailed()
        END IF
    ELSE 
        IF createStatusDefault(statusDefault) EQUALS operationFailed
            RETURN displayAddFailed()
        END IF        
    END IF 
    RETURN statusDefaultSaved
END saveStatusDefault 


createCategoryDefault(categoryDefault:CategoryDefault)
    IF addToCategoryDefaultDatabase(categoryDefault.uniqueID, categoryDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createCategoryDefault
deleteCategoryDefault(categoryDefaultID:Int) 
    IF categoryDefaultExists(categoryDefaultID)
        deleteCategoryDefaultFromDatabase(categoryDefaultID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteCategoryDefault
updateCategoryDefault(categoryDefault:CategoryDefault)  

    IF updateTaskDatabase(categoryDefault.uniqueID,
                                categoryDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateCategoryDefault
saveCategoryDefault(categoryDefault:CategoryDefault)  
    IF categoryDefaultExists(categoryDefault.uniqueID) 
        IF updateCategoryDefault(categoryDefault) EQUALS operationFailed
            RETURN displayUpdateFailed()
        END IF
    ELSE 
        IF createCategoryDefault(categoryDefault) EQUALS operationFailed
            RETURN displayAddFailed()
        END IF        
    END IF 
    RETURN categoryDefaultSaved
END saveCategoryDefault 







