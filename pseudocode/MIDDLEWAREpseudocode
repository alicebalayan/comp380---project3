//here goes the middleware pseudocode 

//default values lists


createPriorityDefault(priorityDefault:PriorityDefault)

    IF addToPriorityDefaultDatabase(priorityDefault.uniqueID, priorityDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createPriorityDefault
deletePriorityDefault(priorityDefaultID:Int) 
    IF priorityDefaultExists(priorityDefaultID)
        deletePriorityDefaultFromDatabase(priorityDefaultID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deletePriorityDefault
updatePriorityDefault(priorityDefault:PriorityDefault)  

    IF updateTaskDatabase(priorityDefault.uniqueID,
                                priorityDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updatePriorityDefault
savePriorityDefault(priorityDefault:PriorityDefault)  
    IF priorityDefaultExists(priorityDefault.uniqueID) 
        IF updatePriorityDefault(priorityDefault) EQUALS operationFailed
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", task)
        END IF
    ELSE 
        IF createPriorityDefault(priorityDefault) EQUALS operationFailed
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", priorityDefault)
        END IF        
    END IF 
    RETURN priorityDefaultSaved
END savePriorityDefault 

createSeverityDefault(severityDefault:SeverityDefault)

    IF addToSeverityDefaultDatabase(severityDefault.uniqueID, severityDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createSeverityDefault
deleteSeverityDefault(severityDefaultID:Int) 
    IF severityDefaultExists(severityDefaultID)
        deleteSeverityDefaultFromDatabase(severityDefaultID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteSeverityDefault
updateSeverityDefault(severityDefault:SeverityDefault)  

    IF updateTaskDatabase(severityDefault.uniqueID,
                                severityDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateSeverityDefault
saveSeverityDefault(severityDefault:SeverityDefault)  
    IF severityDefaultExists(severityDefault.uniqueID) 
        IF updateSeverityDefault(severityDefault) EQUALS operationFailed
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", task)
        END IF
    ELSE 
        IF createSeverityDefault(severityDefault) EQUALS operationFailed
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", severityDefault)
        END IF        
    END IF 
    RETURN severityDefaultSaved
END saveSeverityDefault 
createImpactDefault(impactDefault:ImpactDefault)

    IF addToImpactDefaultDatabase(impactDefault.uniqueID, impactDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createImpactDefault
deleteImpactDefault(impactDefaultID:Int) 
    IF impactDefaultExists(impactDefaultID)
        deleteImpactDefaultFromDatabase(impactDefaultID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteImpactDefault
updateImpactDefault(impactDefault:ImpactDefault)  

    IF updateTaskDatabase(impactDefault.uniqueID,
                                impactDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateImpactDefault
saveImpactDefault(impactDefault:ImpactDefault)  
    IF impactDefaultExists(impactDefault.uniqueID) 
        IF updateImpactDefault(impactDefault) EQUALS operationFailed
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", task)
        END IF
    ELSE 
        IF createImpactDefault(impactDefault) EQUALS operationFailed
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", impactDefault)
        END IF        
    END IF 
    RETURN impactDefaultSaved
END saveImpactDefault 
//get one StatusDefault
getStatusDefault(id:Int)
    RETURN queryStatusDefaultDatabase(id)
END getStatusDefault
//get one queryStatusDefault
getAllStatusDefault()
    RETURN queryAllStatusDefaultDatabase()
END getStatusDefault

createStatusDefault(statusDefault:StatusDefault)

    IF addToStatusDefaultDatabase(statusDefault.uniqueID, statusDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createStatusDefault
deleteStatusDefault(statusDefaultID:Int) 
    IF statusDefaultExists(statusDefaultID)
        deleteStatusDefaultFromDatabase(statusDefaultID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteStatusDefault
updateStatusDefault(statusDefault:StatusDefault)  

    IF updateTaskDatabase(statusDefault.uniqueID,
                                statusDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateStatusDefault
saveStatusDefault(statusDefault:StatusDefault)  
    IF statusDefaultExists(statusDefault.uniqueID) 
        IF updateStatusDefault(statusDefault) EQUALS operationFailed
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", task)
        END IF
    ELSE 
        IF createStatusDefault(statusDefault) EQUALS operationFailed
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", statusDefault)
        END IF        
    END IF 
    RETURN statusDefaultSaved
END saveStatusDefault 
//get one CategoryDefault
getCategoryDefault(id:Int)
    RETURN queryCategoryDefaultDatabase(id)
END getCategoryDefault
//get one queryCategoryDefault
getAllCategoryDefault()
    RETURN queryAllCategoryDefaultDatabase()
END getCategoryDefault

createCategoryDefault(categoryDefault:CategoryDefault)

    IF addToCategoryDefaultDatabase(categoryDefault.uniqueID, categoryDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createCategoryDefault
deleteCategoryDefault(categoryDefaultID:Int) 
    IF categoryDefaultExists(categoryDefaultID)
        deleteCategoryDefaultFromDatabase(categoryDefaultID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteCategoryDefault
updateCategoryDefault(categoryDefault:CategoryDefault)  

    IF updateTaskDatabase(categoryDefault.uniqueID,
                                categoryDefault.name)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateCategoryDefault
saveCategoryDefault(categoryDefault:CategoryDefault)  
    IF categoryDefaultExists(categoryDefault.uniqueID) 
        IF updateCategoryDefault(categoryDefault) EQUALS operationFailed
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", task)
        END IF
    ELSE 
        IF createCategoryDefault(categoryDefault) EQUALS operationFailed
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", categoryDefault)
        END IF        
    END IF 
    RETURN categoryDefaultSaved
END saveCategoryDefault 

//requirement pseudocode
//get requirements
getRequirement(requirementID:Int)
    RETURN queryRequirementDatabase(requirementID)
END getRequirement
getAllRequirement()
    RETURN queryAllRequirementDatabase()
END getRequirement

//save the requirement 
saveRequirement(requirement:Requirement) 
    IF requirementExists(requirement.uniqueID) 
        IF updateRequirement(requirement) EQUALS operationFailed
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", requirement)
        END IF
    ELSE 
        IF createRequirement(requirement) EQUALS operationFailed
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", requirement)

        END IF        
    END IF 
    RETURN requirementSaved 
END saveRequirement 
createRequirement(requirement:Requirement)

    IF addToRequirementDatabase(requirement.uniqueID,
                                    requirement.name,
                                    requirement.deliverableID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createRequirement

deleteRequirement(requirementID:INT)
    IF requirementExists(requirementID)
        Requirement requirement=queryRequirementDatabase(requirementID)
        Deliverable[] otherRequirementsWithSameDeliverable=queryRequirementDatabaseWithConnectedDeliverable(requirement.deliverableID)
        IF otherRequirementsWithSameDeliverable.length==0
            deleteDeliverable(requirement.deliverableID)
        END IF
        deleteRequirementFromDatabase(requirementID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteRequirement
//update Requirement  
updateRequirement(requirement:Requirement)  

    IF updateRequirementDatabase(requirement.uniqueID,
                                    requirement.name,
                                    requirement.deliverableID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateRequirement

//deliverable pseudocode
//get deliverables
getDeliverable(deliverableID:Int)
    RETURN  queryDeliverableDatabase(deliverableID)
END getDeliverable
getAllDeliverable()
    RETURN queryAllDeliverableDatabase()
END getDeliverable

createDeliverable(deliverable:Deliverable)

    IF addToDeliverableDatabase(deliverable.uniqueID,
                                    deliverable.name,
                                    deliverable.description,
                                    deliverable.dueDate)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createDeliverable
//update the deliverable  
updateDeliverable(deliverable:Deliverable)  

    IF updateDeliverableDatabase(deliverable.uniqueID,
                                        deliverable.name,
                                        deliverable.description,
                                        deliverable.dueDate)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateDeliverable

deleteDeliverable(deliverableID:Int) 
    IF deliverableExists(deliverableID)
        Task[] associatedTasks=queryTaskDatabaseWithConnectedDeliverable(deliverableID)
        FOR EACH task IN associatedTasks
            removeAssociatedTasks(associatedTasks.uniqueID)
            removeAssociated(associatedTasks.uniqueID)
        END FOR
        deleteDeliverableFromDatabase(deliverableID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteDeliverable 

//save the deliverable 
saveDeliverable(deliverable:Deliverable, associatedTasks:INT[], associatedRequirements:Int[] ) 
    IF deliverableExists(deliverable.uniqueID) 
        IF updateDeliverable(deliverable) 
            updateAssociatedTasks(deliverable.uniqueID, associatedTasks) 
            updateAssociatedRequirements(deliverable.uniqueID, associatedRequirements) 
        ELSE
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", deliverable)
        END IF
    ELSE 
        IF createDeliverable(deliverable) EQUALS operationFailed
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", deliverable)
        ELSE 
            addAssociatedTasks(deliverable.uniqueID, associatedTasks) 
            addAssociatedRequirements(deliverable.uniqueID, associatedRequirements) 
        END IF        
    END IF 
    RETURN deliverableSaved 
END saveDeliverable 


updateAssociatedTasks(deliverableID:INT, associatedTasks:INT[]) 
    Task[] tasks=queryTaskDatabaseWithConnectedDeliverable(deliverableID)
    FOR EACH task IN tasks
        removeAssociatedTasks(task.uniqueID) 
    END FOR
    addAssociatedTasks(deliverableID, associatedTasks) 
END updateAssociatedTasks

updateAssociatedRequirements(deliverableID:INT, associatedRequirements:INT[]) 
    Requirements[] requirements=queryRequirementDatabaseWithConnectedDeliverable(deliverableID)
    FOR EACH requirement IN requirements
        removeAssociatedRequirements(requirement.uniqueID) 
    END FOR
    addAssociatedRequirements(deliverableID, associatedTasks) 
END updateAssociatedRequirements

removeAssociatedTasks(taskID:INT) 
    Task task=queryTaskDatabase(taskID)
    task.deliverableID=NULL
     IF updateTask(task) EQUALS operationFailed
        //displayUpdateFailed exist in gui
        RETURN displayUpdateFailed("ErrorSQL", temp)
    END IF    
END removeAssociatedTasks
removeAssociatedRequirements(requirementID:INT) 
    Requirement requirement=queryTaskDatabase(requirementID)
    requirement.deliverableID=NULL
     IF updateRequirement(requirement) EQUALS operationFailed
        //displayUpdateFailed exist in gui
        RETURN displayUpdateFailed("ErrorSQL", temp)
    END IF    
END removeAssociatedTasks
addAssociatedTasks(deliverableID:INT, associatedTasks:INT[]) 
    FOR EACH task IN associatedTasks
        Task temp = queryTaskDatabase(task)
        temp.deliverableID=deliverableID
        IF updateTask(temp) EQUALS operationFailed
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", temp)
        END IF
    END FOR
END addAssociatedTasks

addAssociatedRequirements(deliverableID:INT, associatedRequirements:INT[]) 
    FOR EACH requirement IN associatedRequirements
        Requirement temp = getRequirement(requirement)
        temp.deliverableID=deliverableID
        IF updateRequirement(temp) EQUALS operationFailed
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", temp)
        END IF
    END FOR
END addAssociatedRequirements

//task pseudocode
//create task  
createTask(deliverable:Task)

    IF addToTaskDatabase(task.uniqueID,
                                task.name,
                                task.description,
                                task.expectedStartDate,
                                task.expectedEndDate,
                                task.expectedDuration,
                                task.expectedEffort,
                                task.actualStartDate,
                                task.actualEndDate,
                                task.actualDuration,
                                task.effortCompleted,
                                task.actualEffort,
                                task.percentComplete,
                                task.deliverableID,
                                task.taskType,
                                task.parentID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createTask

//save task  
saveTask(task:Task, associatedIssues:INT[],associatedResources:INT[], predecessorsTasks:INT[],successorsTasks:INT[]) 
    IF taskExists(task.uniqueID) 
        IF updateTask(task) 
            updateAssociatedIssues(task.uniqueID, associatedIssues) 
            updateAssociatedResources(task.uniqueID, associatedResources) 
            updatePredecessorsTasks(task.uniqueID, predecessorsTasks) 
            updateSuccessorsTasks(task.uniqueID, successorsTasks) 
        ELSE
            //displayUpdateFailed exist in gui
            RETURN displayUpdateFailed("ErrorSQL", task)
        END IF
    ELSE 
        IF createTask(task) EQUALS operationFailed
            //displayAddFailed exist in gui
            RETURN displayAddFailed("ErrorSQL", task)
        ELSE 
            addAssociatedIssues(task.uniqueID, associatedIssues) 
            addAssociatedResources(task.uniqueID, associatedResources) 
            addPredecessorsTasks(task.uniqueID, predecessorsTasks) 
            addSuccessorsTasks(task.uniqueID, successorsTasks) 

        END IF        
    END IF 
    RETURN taskSaved 
END saveTask 
//update task  
updateTask(task:Task)  

    IF updateTaskDatabase(task.uniqueID,
                                task.name,
                                task.description,
                                task.expectedStartDate,
                                task.expectedEndDate,
                                task.expectedDuration,
                                task.expectedEffort,
                                task.actualStartDate,
                                task.actualEndDate,
                                task.actualDuration,
                                task.effortCompleted,
                                task.actualEffort,
                                task.percentComplete,
                                task.deliverableID,
                                task.taskType,
                                task.parentID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END updateTask
//delete task 
deleteTask(taskID:Int) 
    IF taskExists(taskID)
        deleteTaskFromDatabase(taskID) 
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF
END deleteTask




//add those 
addAssociatedIssues(taskID:INT, associatedIssues:INT[]) 
    FOR EACH issue IN associatedIssues
        IF createTaskIssueRealtion(issue,taskID) EQUALS operationFailed
            RETURN displayUpdateFailed("ErrorSQL", "task issue relation")
        END IF
    END FOR
END addAssociatedIssues
addAssociatedResources(taskID:INT, associatedResources:INT[]) 
    FOR EACH resource IN associatedResources
        IF createTaskResourceRealtion(resource,taskID) EQUALS operationFailed
            RETURN displayUpdateFailed("ErrorSQL", "task resource relation")
        END IF
    END FOR
END addAssociatedResources
addPredecessorsTasks(taskID:INT, predecessorsTasks:INT[]) 
    FOR EACH predecessorTask IN predecessorsTasks
        IF createTaskPredecessor(issue,taskID) EQUALS operationFailed
            RETURN displayUpdateFailed("ErrorSQL", "task predecessor relation")
        END IF
    END FOR
END addPredecessorsTasks

addSuccessorsTasks(taskID:INT, successorsTasks:INT[]) 
    FOR EACH successorTask IN successorsTasks
        IF createTaskPredecessor(issue,taskID) EQUALS operationFailed
            RETURN displayUpdateFailed("ErrorSQL", "task successor relation")
        END IF
    END FOR
END addSuccessorsTasks

updateAssociatedIssues(taskID:INT, associatedIssues:INT[])
    deleteTaskIssuesRelationsFromDatabase(getIssuesWithTask(taskID))
    addAssociatedIssues(taskID, associatedIssues) 
END updateAssociatedIssues 
updateAssociatedResources(taskID:INT, associatedResources:INT[]) 
    deleteTaskResourcesRelationsFromDatabase(getResourcesWithTask(taskID))
    addAssociatedResources(taskID, associatedResources) 
END updateAssociatedResources

updatePredecessorsTasks(taskID:INT, predecessorsTasks:INT[]) 
    deletePredecessorsTasksFromDatabase(getTaskPredecessors(taskID))
    addPredecessorsTasks(taskID, predecessorsTasks) 
END updatePredecessorsTasks
updateSuccessorsTasks(taskID:INT, successorsTasks:INT[]) 
    deleteSuccessorsTasksFromDatabase(getTaskSuccessors(taskID))
    addAssociatedResources(taskID, successorsTasks) 
END updateSuccessorsTasks

//tasks issues relation
createTaskIssueRealtion(issueID:INT,taskID:INT)

    IF addToIssuesRelationsDatabase(issueID,taskID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END addTaskIssueRealtion


//tasks resources relation
createTaskResourceRealtion(resourceID:INT,taskID:INT)

    IF addToResourcesRelationsDatabase(resourceID,taskID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END addTaskResourceRealtion

//tasks predecessors relation
createTaskPredecessor(taskID:INT,taskPredecessorID:INT)

    IF addToTaskPredecessorsDatabase(taskID,taskPredecessorID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createTaskPredecessor

//tasks successors relation
createTaskSuccessor(taskID:INT,taskSuccessorID:INT)

    IF addToTaskSuccessorsDatabase(taskID,taskSuccessorID)
        RETURN operationCompletedSuccessfully
    ELSE
        RETURN operationFailed
    END IF 
END createTaskSuccessor




